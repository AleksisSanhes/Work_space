import logging
import json
import os
import re
import asyncio
from datetime import datetime
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Bot
)
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes
)
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = "8217915867:AAFLPnQmnxhHmjloF4Ct3HhR9jjRjVYV6C8"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
MODERATION_CHANNEL = "..." # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–∞–Ω–∞–ª–∞ –ë–æ—Ç: @tg_FlowH2_bot (ID: 8217915867) –¢–∏–ø –∏—Å—Ç–æ—á–Ω–∏–∫–∞: user, ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: 6105807855, –ò–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: FlowH2, Username: @FlowH2, –í–∞—à ID: 6105807855
PUBLISH_CHANNEL = "..."  # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–∞–Ω–∞–ª–∞
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
NEWS_DB = {}


def clean_telegram_html(text: str) -> str:
    """–û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö HTML-—Ç–µ–≥–æ–≤"""
    if not text:
        return ""

    # –°–Ω–∞—á–∞–ª–∞ –∑–∞–º–µ–Ω—è–µ–º —Ç–µ–≥–∏ <p> –Ω–∞ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
    text = text.replace('<p>', '\n\n').replace('</p>', '\n\n')
    text = text.replace('<P>', '\n\n').replace('</P>', '\n\n')

    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –¥—Ä—É–≥–∏–µ HTML-—Ç–µ–≥–∏
    text = re.sub(r'<[^>]+>', '', text)

    # –ó–∞–º–µ–Ω—è–µ–º HTML-—Å—É—â–Ω–æ—Å—Ç–∏
    replacements = {
        '&amp;': '&',
        '&lt;': '<',
        '&gt;': '>',
        '&quot;': '"',
        '&#39;': "'",
        '&nbsp;': ' ',
    }

    for entity, char in replacements.items():
        text = text.replace(entity, char)

    return text


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text("–ë–æ—Ç –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞–ø—É—â–µ–Ω!")


async def send_to_moderation(news_item: dict) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ—Å—Ç—å –≤ –∫–∞–Ω–∞–ª –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    bot = Bot(TOKEN)

    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ç–µ–≥–æ–≤
    cleaned_title = clean_telegram_html(news_item.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞'))
    cleaned_preview = clean_telegram_html(news_item.get('preview', ''))

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    message_text = (
        f"<b>{cleaned_title}</b>\n\n"
        f"<b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> {news_item.get('source', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫')}\n"
        f"<b>–î–∞—Ç–∞:</b> {news_item.get('date', '–ë–µ–∑ –¥–∞—Ç—ã')}\n"
        f"<b>–°—Å—ã–ª–∫–∞:</b> <a href='{news_item.get('url', '')}'>–û—Ä–∏–≥–∏–Ω–∞–ª</a>\n\n"
        f"{cleaned_preview}"
    )

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"approve_{news_item['id']}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{news_item['id']}")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    try:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∫–∞–Ω–∞–ª –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        message = await bot.send_message(
            chat_id=MODERATION_CHANNEL,
            text=message_text,
            parse_mode="HTML",
            reply_markup=reply_markup,
            disable_web_page_preview=True
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        NEWS_DB[news_item['id']] = {
            'message_id': message.message_id,
            'news_data': news_item
        }
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–æ—Å—Ç—å ID: {news_item['id']}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        logger.error(f"–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {message_text[:200]}...")


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()

    parts = query.data.split('_')
    if len(parts) < 2:
        await query.edit_message_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")
        return

    action, news_id = parts[0], parts[1]
    news_data = NEWS_DB.get(news_id)

    if not news_data:
        await query.edit_message_text("–ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return

    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
    await query.edit_message_reply_markup(reply_markup=None)

    try:
        if action == "approve":
            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª
            await context.bot.send_message(
                chat_id=PUBLISH_CHANNEL,
                text=format_news_for_publication(news_data['news_data']),
                parse_mode="HTML",
                disable_web_page_preview=True
            )
            await query.edit_message_text(
                f"‚úÖ –ù–æ–≤–æ—Å—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!\n\n{query.message.text}",
                parse_mode="HTML"
            )
            logger.info(f"–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –Ω–æ–≤–æ—Å—Ç—å ID: {news_id}")
        elif action == "reject":
            await query.edit_message_text(
                f"‚ùå –ù–æ–≤–æ—Å—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!\n\n{query.message.text}",
                parse_mode="HTML"
            )
            logger.info(f"–û—Ç–∫–ª–æ–Ω–µ–Ω–∞ –Ω–æ–≤–æ—Å—Ç—å ID: {news_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏: {e}")
        await query.edit_message_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ")


def format_news_for_publication(news_item: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤–æ—Å—Ç—å –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ç–µ–≥–æ–≤
    cleaned_title = clean_telegram_html(news_item.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞'))
    cleaned_text = clean_telegram_html(news_item.get('full_text', ''))
    cleaned_source = clean_telegram_html(news_item.get('source', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫'))

    # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
    if len(cleaned_text) > 3800:
        cleaned_text = cleaned_text[:3800] + "... [—Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ]"

    return (
        f"<b>üî• {cleaned_title}</b>\n\n"
        f"{cleaned_text}\n\n"
        f"<i>–ò—Å—Ç–æ—á–Ω–∏–∫: {cleaned_source}</i>\n"
        f"<a href='{news_item.get('url', '')}'>–û—Ä–∏–≥–∏–Ω–∞–ª —Å—Ç–∞—Ç—å–∏</a>"
    )


async def load_and_send_news(application: Application) -> None:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ JSON –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é"""
    files = [f for f in os.listdir() if f.startswith('energy_news') and f.endswith('.json')]
    if not files:
        logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω—ã JSON-—Ñ–∞–π–ª—ã —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏")
        return

    latest_file = max(files, key=os.path.getctime)
    logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∞–π–ª –Ω–æ–≤–æ—Å—Ç–µ–π: {latest_file}")

    try:
        with open(latest_file, 'r', encoding='utf-8') as f:
            news_data = json.load(f)

        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(news_data)} –Ω–æ–≤–æ—Å—Ç–µ–π")

        for i, news_item in enumerate(news_data):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            if not all(key in news_item for key in ['title', 'source', 'date', 'url', 'preview', 'full_text']):
                logger.warning(f"–ü—Ä–æ–ø—É—â–µ–Ω–∞ –Ω–æ–≤–æ—Å—Ç—å {i} –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π")
                continue

            # –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
            news_item['id'] = f"{datetime.now().strftime('%Y%m%d%H%M')}_{i}"
            await send_to_moderation(news_item)
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å API
            await asyncio.sleep(0.3)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        logger.exception("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")


async def post_init(application: Application) -> None:
    """–§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    await load_and_send_news(application)


def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(TOKEN).post_init(post_init).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    application.run_polling()


if __name__ == '__main__':
    main()