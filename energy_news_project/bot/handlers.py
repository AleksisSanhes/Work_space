# bot/handlers.py
import logging
from typing import Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.error import TelegramError

from bot.database import SafeNewsDB
from bot.services.telegram_service import TelegramService
from bot.formatters import format_news_for_publication

logger = logging.getLogger(__name__)


class BotHandlers:
    """Unified handlers for all bot interactions."""

    def __init__(self, database: SafeNewsDB, telegram_service: TelegramService):
        self.db = database
        self.telegram = telegram_service

    # ===== CALLBACK HANDLERS =====
    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle callback button presses from moderation messages."""
        query = update.callback_query
        if not query:
            return

        await query.answer()

        try:
            # Parse callback data
            if "|" not in query.data:
                await query.edit_message_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏.")
                return

            action, news_id = query.data.split("|", 1)
            logger.info(f"Processing action: {action} for news: {news_id}")

            # Get news data
            data_entry = self.db.get_news(news_id)
            if not data_entry:
                await query.edit_message_text("‚ö†Ô∏è –ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
                return

            # Route to appropriate handler
            if action == "approve":
                await self._handle_approve(query, news_id, data_entry, context)
            elif action == "reject":
                await self._handle_reject(query, news_id, data_entry, context)
            elif action == "edit":
                await self._handle_edit(query, news_id, data_entry, context)
            else:
                await query.edit_message_text(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}")

        except Exception as e:
            logger.error(f"Callback handler error: {e}", exc_info=True)
            try:
                await query.edit_message_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")
            except TelegramError:
                # If edit fails, try to send a new message
                await query.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")

    async def _handle_approve(self, query, news_id: str, data_entry: dict, context: ContextTypes.DEFAULT_TYPE):
        """Handle news approval and publication."""
        try:
            news_item = data_entry["news_data"]
            channel_id = data_entry["channel_id"]
            message_id = data_entry["message_id"]

            edit_status = " (–æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π)" if news_item.get("edited", False) else ""

            # Publish to main channel
            success = await self.telegram.publish_news(context.bot, news_item, news_id)

            if success:
                # Clean up preview messages if they exist (check if they weren't already cleaned)
                preview_ids = news_item.get("preview_message_ids")
                preview_chat_id = news_item.get("preview_chat_id")

                if preview_ids and preview_chat_id:
                    logger.info(f"Cleaning up remaining preview messages for news {news_id}")
                    await self._cleanup_preview_messages(news_item, context.bot, news_id)

                # Delete moderation message
                await self.telegram.safe_delete_messages(
                    context.bot, channel_id, [message_id], news_id
                )

                # Update database
                self.db.update_news(news_id, {"status": "published"})

                # Skip sending any notifications to avoid Bad Request
                logger.info(f"News {news_id} successfully approved and published{edit_status} - notifications disabled")
                # Remove from database after successful publication
                self.db.delete_news(news_id)

                logger.info(f"News {news_id} approved and published{edit_status}")

            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏.")

        except Exception as e:
            logger.error(f"Approve handler error for {news_id}: {e}")
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {str(e)}")

    async def _handle_reject(self, query, news_id: str, data_entry: dict, context: ContextTypes.DEFAULT_TYPE):
        """Handle news rejection and cleanup."""
        try:
            news_item = data_entry["news_data"]
            channel_id = data_entry["channel_id"]
            message_id = data_entry["message_id"]

            # Clean up preview messages if they exist
            await self._cleanup_preview_messages(news_item, context.bot, news_id)

            # Delete moderation message
            await self.telegram.safe_delete_messages(
                context.bot, channel_id, [message_id], news_id
            )

            # Update database
            self.db.update_news(news_id, {"status": "rejected"})

            # Log successful rejection
            logger.info(f"News {news_id} successfully rejected and removed")

            # Remove from database
            self.db.delete_news(news_id)

            logger.info(f"News {news_id} rejected and removed")

        except Exception as e:
            logger.error(f"Reject handler error for {news_id}: {e}")
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: {str(e)}")

    async def _handle_edit(self, query, news_id: str, data_entry: dict, context: ContextTypes.DEFAULT_TYPE):
        """Handle edit request - show full text and prepare for editing."""
        try:
            news_item = data_entry["news_data"]
            full_text = news_item.get("full_text", "")

            if full_text:
                # Send header message
                header_msg = await query.message.reply_text(
                    f"üìù –¢–µ–∫—É—â–∏–π –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ (ID: {news_id}):"
                )

                # Send full text in chunks
                text_message_ids = await self.telegram.split_and_send_message(
                    context.bot, query.message.chat_id, full_text
                )

                # Store preview message IDs
                all_preview_ids = [header_msg.message_id] + text_message_ids

                # Update news data with preview info
                updates = {
                    "news_data.preview_message_ids": all_preview_ids,
                    "news_data.preview_chat_id": query.message.chat_id
                }
                self.db.update_news(news_id, updates)

                logger.info(f"Preview messages sent for news {news_id}: {all_preview_ids}")

            else:
                # No full text available
                preview_msg = await query.message.reply_text("‚ö†Ô∏è –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")

                updates = {
                    "news_data.preview_message_ids": [preview_msg.message_id],
                    "news_data.preview_chat_id": query.message.chat_id
                }
                self.db.update_news(news_id, updates)

            # Send edit instructions
            await query.message.reply_text(
                "‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏.\n"
                "–ß—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip\n"
                "‚ö†Ô∏è –ü–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ."
            )

            # Set editing state
            if context.user_data is not None:
                context.user_data["editing_news_id"] = news_id

        except Exception as e:
            logger.error(f"Edit handler error for {news_id}: {e}")
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é: {str(e)}")

    async def _cleanup_preview_messages(self, news_item: dict, bot, news_id: str):
        """Clean up preview messages if they exist."""
        preview_ids = news_item.get("preview_message_ids")
        preview_chat_id = news_item.get("preview_chat_id")

        if preview_ids and preview_chat_id:
            await self.telegram.safe_delete_messages(
                bot, preview_chat_id, preview_ids, news_id
            )
            logger.info(f"Cleaned up preview messages for news {news_id}")

    # ===== MESSAGE HANDLERS =====
    async def edit_text_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle text messages for news editing."""
        if not update.message or not update.message.text:
            return

        logger.debug(f"Received text message: {update.message.text[:100]}...")

        # Check if user data exists and has editing state
        if not context.user_data:
            logger.debug("No user data available")
            return

        news_id = context.user_data.get("editing_news_id")
        if not news_id:
            logger.debug("No active editing session")
            return

        try:
            # Handle skip command
            if update.message.text.strip() == "/skip":
                await self._handle_skip_edit(update, context, news_id)
                return

            # Process the edited text
            await self._process_edited_text(update, context, news_id)

        except Exception as e:
            logger.error(f"Edit text handler error: {e}", exc_info=True)
            await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞: {str(e)}")
            # Clear editing state on error
            context.user_data["editing_news_id"] = None

    async def _handle_skip_edit(self, update: Update, context: ContextTypes.DEFAULT_TYPE, news_id: str):
        """Handle skip editing command."""
        context.user_data["editing_news_id"] = None
        await update.message.reply_text("‚úÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ.")
        logger.info(f"Editing skipped for news {news_id}")

    async def _process_edited_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE, news_id: str):
        """Process the edited text for a news item."""
        new_text = update.message.text.strip()

        # Get news data
        data_entry = self.db.get_news(news_id)
        if not data_entry:
            await update.message.reply_text("‚ö†Ô∏è –ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ.")
            context.user_data["editing_news_id"] = None
            return

        # Update news data
        updates = {
            "news_data.full_text": new_text,
            "news_data.edited": True,
            "updated_at": None  # Will be set automatically by database
        }

        logger.info(f"Updating news {news_id} with new text: {new_text[:100]}...")

        # Clean up old preview messages
        news_item = data_entry["news_data"]
        preview_ids = news_item.get("preview_message_ids")
        preview_chat_id = news_item.get("preview_chat_id")

        if preview_ids and preview_chat_id:
            await self.telegram.safe_delete_messages(
                context.bot, preview_chat_id, preview_ids, news_id
            )

            # Clear preview info
            updates.update({
                "news_data.preview_message_ids": [],
                "news_data.preview_chat_id": None
            })

        # Save changes
        success = self.db.update_news(news_id, updates)

        # Verify the update was successful
        if success:
            verification = self.db.get_news(news_id)
            if verification:
                actual_text = verification["news_data"].get("full_text", "")
                actual_edited = verification["news_data"].get("edited", False)
                logger.info(f"Verification - text updated: {actual_text == new_text}, edited flag: {actual_edited}")
            else:
                logger.error(f"Could not verify update for news {news_id}")
        else:
            logger.error(f"Failed to update news {news_id}")

        if not success:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å.")
            context.user_data["editing_news_id"] = None
            return

        # Update moderation message
        channel_id = data_entry["channel_id"]
        message_id = data_entry["message_id"]

        if message_id:
            # Get updated news data
            updated_entry = self.db.get_news(news_id)
            updated_news_item = updated_entry["news_data"] if updated_entry else news_item

            success = await self.telegram.update_moderation_message(
                context.bot, channel_id, message_id, updated_news_item, news_id
            )

            if success:
                await update.message.reply_text(
                    "‚úÖ –¢–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª—ë–Ω –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n"
                    "–¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å' –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏."
                )
            else:
                await update.message.reply_text(
                    "‚úÖ –¢–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª—ë–Ω!\n"
                    "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏, –Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.\n"
                    "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å' –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏."
                )
        else:
            await update.message.reply_text(
                "‚úÖ –¢–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª—ë–Ω!\n"
                "‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã."
            )

        # Clear editing state
        context.user_data["editing_news_id"] = None
        logger.info(f"News {news_id} text updated successfully")

    # ===== COMMAND HANDLERS =====
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /start command."""
        welcome_text = (
            "ü§ñ –ë–æ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞–ø—É—â–µ–Ω!\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
            "/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
            "/health - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã\n"
            "/testpublish - –¢–µ—Å—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª"
        )

        await update.message.reply_text(welcome_text)
        logger.info(f"Start command from user {update.effective_user.id}")

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /help command."""
        help_text = (
            "üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π\n\n"
            "üîß –ö–æ–º–∞–Ω–¥—ã:\n"
            "/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
            "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
            "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n"
            "/health - –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã\n"
            "/testpublish - –¢–µ—Å—Ç–æ–≤–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è\n"
            "/skip - –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ\n\n"
            "üìù –ü—Ä–æ—Ü–µ—Å—Å –º–æ–¥–µ—Ä–∞—Ü–∏–∏:\n"
            "1. –ù–æ–≤–æ—Å—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤ –∫–∞–Ω–∞–ª –º–æ–¥–µ—Ä–∞—Ü–∏–∏\n"
            "2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏: ‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å, ‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å, ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å\n"
            "3. –ü—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ /skip\n\n"
            "‚ö†Ô∏è –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –ª–æ–≥–∏—Ä—É—é—Ç—Å—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."
        )

        await update.message.reply_text(help_text)

    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /stats command."""
        try:
            db_stats = self.db.get_stats()
            telegram_stats = self.telegram.get_circuit_breaker_stats()

            stats_text = (
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã\n\n"
                f"üì∞ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:\n"
                f"‚Ä¢ –í—Å–µ–≥–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {db_stats['total_news']}\n"
                f"‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {db_stats['sent_count']}\n"
                f"‚Ä¢ –û–∂–∏–¥–∞–µ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {db_stats['pending']}\n"
                f"‚Ä¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {db_stats['published']}\n"
                f"‚Ä¢ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {db_stats['rejected']}\n"
                f"‚Ä¢ –†–∞–∑–º–µ—Ä –ë–î: {db_stats['db_size_mb']:.2f} –ú–ë\n\n"
                f"üì° Telegram API:\n"
                f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {telegram_stats['state']}\n"
                f"‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {telegram_stats['success_count']}\n"
                f"‚Ä¢ –ù–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {telegram_stats['failure_count']}\n"
                f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {telegram_stats['success_rate']:.1f}%"
            )

            await update.message.reply_text(stats_text)

        except Exception as e:
            logger.error(f"Stats command error: {e}")
            await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")

    async def health_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /health command."""
        try:
            health_info = await self.telegram.health_check(context.bot)

            status_emoji = "üü¢" if health_info["telegram_api"] == "healthy" else "üî¥"

            health_text = (
                f"üè• –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã\n\n"
                f"{status_emoji} Telegram API: {health_info['telegram_api']}\n"
                f"üîå Circuit Breaker: {health_info['circuit_breaker']}\n"
                f"üíæ –†–∞–∑–º–µ—Ä –∫–µ—à–∞: {health_info['cache_size']}\n"
            )

            if "bot_username" in health_info:
                health_text += f"ü§ñ –ë–æ—Ç: @{health_info['bot_username']}\n"

            if "error" in health_info:
                health_text += f"‚ùå –û—à–∏–±–∫–∞: {health_info['error']}\n"

            await update.message.reply_text(health_text)

        except Exception as e:
            logger.error(f"Health command error: {e}")
            await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {str(e)}")

    async def test_publish_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /testpublish command."""
        try:
            test_message = await self.telegram.send_with_retry(
                context.bot,
                self.telegram.config.publish_channel,
                "üîî –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"
            )

            if test_message:
                await update.message.reply_text("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.")
            else:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")

        except Exception as e:
            logger.error(f"Test publish error: {e}")
            await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {str(e)}")

    async def skip_edit_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /skip command."""
        if not context.user_data:
            await update.message.reply_text("‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
            return

        news_id = context.user_data.get("editing_news_id")
        if news_id:
            context.user_data["editing_news_id"] = None
            await update.message.reply_text("‚úÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ.")
            logger.info(f"Editing skipped for news {news_id}")
        else:
            await update.message.reply_text("‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")

    # Admin commands (only if debug mode is enabled)
    async def cleanup_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /cleanup command (admin only)."""
        try:
            removed_count = self.db.cleanup_old_news(days=30)
            await update.message.reply_text(f"üóëÔ∏è –û—á–∏—â–µ–Ω–æ {removed_count} —Å—Ç–∞—Ä—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π.")

        except Exception as e:
            logger.error(f"Cleanup command error: {e}")
            await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {str(e)}")

    async def backup_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /backup command (admin only)."""
        try:
            self.db.force_save()
            await update.message.reply_text("üíæ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.")

        except Exception as e:
            logger.error(f"Backup command error: {e}")
            await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")