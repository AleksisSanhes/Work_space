# bot/telegram_bot.py
import asyncio
import hashlib
import logging
from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.error import TelegramError, RetryAfter
from bot.formatters import format_news_for_publication
from bot.db import NewsDB

logger = logging.getLogger(__name__)

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∫–∞–Ω–∞–ª–æ–≤ ---
MODERATION_CHANNEL = "-1002996332660"
PUBLISH_CHANNEL = "-1003006895565"

# --- –£—Ç–∏–ª–∏—Ç—ã ---
def make_news_id(item, index=0):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ URL, –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏–ª–∏ –ø—Ä–µ–≤—å—é.
    """
    key = (item.get("url") or "").strip()
    if not key:
        key = f"{item.get('title','')}-{item.get('date','')}".strip()
    if not key:
        key = item.get("preview", "")[:120]
    return hashlib.sha256(key.encode("utf-8")).hexdigest()[:16]


async def send_with_delay(bot: Bot, chat_id: str, text: str, reply_markup=None,
                          pause: float = 1.5, max_retries: int = 5):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö.
    """
    attempt = 0
    while attempt < max_retries:
        try:
            message = await bot.send_message(
                chat_id=chat_id,
                text=text,
                reply_markup=reply_markup,
                disable_web_page_preview=True,
            )
            await asyncio.sleep(pause)
            return message
        except RetryAfter as e:
            wait_time = e.retry_after
            logger.warning(f"Flood control: –∂–¥—ë–º {wait_time} —Å–µ–∫...")
            await asyncio.sleep(wait_time)
            attempt += 1
        except TelegramError as e:
            logger.error(f"–û—à–∏–±–∫–∞ Telegram –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
            return None
        except Exception as e:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
            return None
    logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫.")
    return None


async def send_to_moderation(bot: Bot, news_item: dict, db: NewsDB):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ—Å—Ç–∏ –≤ –∫–∞–Ω–∞–ª –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏ approve/reject/edit.
    """
    news_id = news_item["id"]
    text = (
        f"üì∞ <b>{news_item['title']}</b>\n\n"
        f"{news_item['preview']}\n\n"
        f"<i>–ò—Å—Ç–æ—á–Ω–∏–∫: {news_item['source']} ({news_item['date']})</i>\n"
        f"{news_item['url']}"
    )
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"approve|{news_id}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject|{news_id}"),
            InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit|{news_id}")
        ]
    ]

    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ—Å—Ç–∏ {news_id} –≤ –∫–∞–Ω–∞–ª –º–æ–¥–µ—Ä–∞—Ü–∏–∏...")
    message = await send_with_delay(
        bot,
        MODERATION_CHANNEL,
        text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

    if message:
        db.add_news(news_id, news_item, message.message_id, MODERATION_CHANNEL)
        logger.info(f"–ù–æ–≤–æ—Å—Ç—å {news_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –º–æ–¥–µ—Ä–∞—Ü–∏—é (message_id={message.message_id})")
    else:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å {news_id} –≤ –∫–∞–Ω–∞–ª –º–æ–¥–µ—Ä–∞—Ü–∏–∏.")
