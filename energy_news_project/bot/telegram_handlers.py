# bot/telegram_handlers.py
import asyncio
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.error import TelegramError
from bot.formatters import format_news_for_publication

logger = logging.getLogger(__name__)

# Global store for editing sessions (handles context issues)
EDITING_SESSIONS = {}


def _safe_escape_html(text):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML."""
    if not text:
        return ""
    import re
    text = re.sub(r'<[^>]+>', '', str(text))
    return text.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')


def _update_news_database(db, news_id, updates):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å—Ç–∞—Ä—É—é –∏ –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏–∏)."""
    if hasattr(db, 'update_news'):
        # –ù–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö - –ø–æ–ø—Ä–æ–±—É–µ–º –¥–≤–∞ —Å–ø–æ—Å–æ–±–∞
        try:
            return db.update_news(news_id, updates)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ update_news: {e}")
            # Fallback –∫ –ø—Ä—è–º–æ–º—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—é
            if news_id in db.news_db:
                for key, value in updates.items():
                    if '.' in key:
                        parts = key.split('.')
                        current = db.news_db[news_id]
                        for part in parts[:-1]:
                            if part not in current:
                                current[part] = {}
                            current = current[part]
                        current[parts[-1]] = value
                    else:
                        db.news_db[news_id][key] = value
                db.save_db()
                return True
            return False
    else:
        # –°—Ç–∞—Ä–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        if news_id in db.news_db:
            for key, value in updates.items():
                if '.' in key:
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π —Ç–∏–ø–∞ "news_data.full_text"
                    parts = key.split('.')
                    current = db.news_db[news_id]
                    for part in parts[:-1]:
                        if part not in current:
                            current[part] = {}
                        current = current[part]
                    current[parts[-1]] = value
                    logger.info(f"–û–±–Ω–æ–≤–∏–ª–∏ {key} = {value[:100] if isinstance(value, str) else value}")
                else:
                    db.news_db[news_id][key] = value

            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
            db.save_db()

            # –ü—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å
            updated_item = db.get_news(news_id)
            if updated_item:
                for key, expected_value in updates.items():
                    if '.' in key:
                        parts = key.split('.')
                        current = updated_item
                        for part in parts:
                            current = current.get(part, {})
                        actual_value = current if not isinstance(current, dict) else current.get(parts[-1])
                        logger.info(
                            f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {key}: –æ–∂–∏–¥–∞–ª–∏ {expected_value[:100] if isinstance(expected_value, str) else expected_value}, –ø–æ–ª—É—á–∏–ª–∏ {actual_value[:100] if isinstance(actual_value, str) else actual_value}")

            return True
        return False


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE, db, telegram_service):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫."""
    query = update.callback_query
    await query.answer()

    try:
        action, news_id = query.data.split("|", 1)
        logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ: {action} –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏ {news_id}")

        # –í—Å–µ–≥–¥–∞ –ø–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
        data_entry = db.get_news(news_id)
        if not data_entry:
            await query.edit_message_text("‚ö†Ô∏è –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        if action == "approve":
            await _handle_approve(query, context, db, news_id, data_entry, telegram_service)
        elif action == "reject":
            await _handle_reject(query, context, db, news_id, data_entry, telegram_service)
        elif action == "edit":
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø—Ä—è–º—É—é –∑–¥–µ—Å—å
            news_item = data_entry["news_data"]
            full_text = news_item.get("full_text", "")

            if full_text:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                header_message = await query.message.reply_text(
                    f"üìù –¢–µ–∫—É—â–∏–π –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ (ID: {news_id}):"
                )

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —á–∞—Å—Ç—è–º–∏ –∏—Å–ø–æ–ª—å–∑—É—è telegram_service
                text_message_ids = await telegram_service.split_and_send_message(
                    context.bot, query.message.chat_id, full_text
                )
                all_preview_ids = [header_message.message_id] + text_message_ids

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø—Ä–µ–≤—å—é —Å–æ–æ–±—â–µ–Ω–∏–π
                updates = {
                    "news_data.preview_message_ids": all_preview_ids,
                    "news_data.preview_chat_id": query.message.chat_id
                }
                _update_news_database(db, news_id, updates)

                logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω—ã ID —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø—Ä–µ–≤—å—é –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏ {news_id}: {all_preview_ids}")
            else:
                preview_message = await query.message.reply_text("‚ö†Ô∏è –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
                updates = {
                    "news_data.preview_message_ids": [preview_message.message_id],
                    "news_data.preview_chat_id": query.message.chat_id
                }
                _update_news_database(db, news_id, updates)

            await query.message.reply_text(
                "‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏.\n"
                "–ß—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip\n"
                "‚ö†Ô∏è –ü–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ."
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            user_id = update.effective_user.id if update.effective_user else "unknown"
            EDITING_SESSIONS[user_id] = news_id

            if context.user_data is not None:
                context.user_data["editing_news_id"] = news_id

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
        try:
            await query.edit_message_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")
        except Exception:
            await query.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")


async def _handle_approve(query, context, db, news_id, data_entry, telegram_service):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏."""
    # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π
    fresh_data_entry = db.get_news(news_id)
    if not fresh_data_entry:
        await query.edit_message_text("‚ö†Ô∏è –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    news_item = fresh_data_entry["news_data"]
    channel_id = fresh_data_entry["channel_id"]
    message_id = fresh_data_entry["message_id"]

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.info(f"–ü—É–±–ª–∏–∫—É–µ–º –Ω–æ–≤–æ—Å—Ç—å {news_id}, full_text: {news_item.get('full_text', '')[:100]}...")
    logger.info(f"Edited flag: {news_item.get('edited', False)}")

    edit_status = " (–æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π)" if news_item.get("edited", False) else ""

    try:
        # –ü—É–±–ª–∏–∫—É–µ–º –≤ –∫–∞–Ω–∞–ª –∏—Å–ø–æ–ª—å–∑—É—è telegram_service
        success = await telegram_service.publish_news(context.bot, news_item, news_id)

        if success:
            logger.info(f"–ù–æ–≤–æ—Å—Ç—å {news_id} —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ –∫–∞–Ω–∞–ª")

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É
            try:
                await query.message.reply_text(f"‚úÖ –ù–æ–≤–æ—Å—Ç—å {news_id} —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞{edit_status}!")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É: {e}")

            # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–≤—å—é —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É—è telegram_service
            if news_item.get("preview_message_ids") and news_item.get("preview_chat_id"):
                await telegram_service.safe_delete_messages(
                    context.bot,
                    news_item["preview_chat_id"],
                    news_item["preview_message_ids"],
                    news_id
                )

            # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—è telegram_service
            await telegram_service.safe_delete_messages(context.bot, channel_id, [message_id], news_id)

            # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            db.delete_news(news_id)
            logger.info(f"–ù–æ–≤–æ—Å—Ç—å {news_id} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞{edit_status} –∏ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –º–æ–¥–µ—Ä–∞—Ü–∏–∏")
        else:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏ {news_id}: {e}")
        try:
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
        except Exception:
            await query.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")


async def _handle_reject(query, context, db, news_id, data_entry, telegram_service):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏."""
    news_item = data_entry["news_data"]
    channel_id = data_entry["channel_id"]
    message_id = data_entry["message_id"]

    try:
        await query.message.reply_text(f"‚ùå –ù–æ–≤–æ—Å—Ç—å {news_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∏ —É–¥–∞–ª–µ–Ω–∞.")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏: {e}")

    # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–≤—å—é —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É—è telegram_service
    if news_item.get("preview_message_ids") and news_item.get("preview_chat_id"):
        await telegram_service.safe_delete_messages(
            context.bot,
            news_item["preview_chat_id"],
            news_item["preview_message_ids"],
            news_id
        )

    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—è telegram_service
    await telegram_service.safe_delete_messages(context.bot, channel_id, [message_id], news_id)

    # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db.delete_news(news_id)
    logger.info(f"–ù–æ–≤–æ—Å—Ç—å {news_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∏ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –º–æ–¥–µ—Ä–∞—Ü–∏–∏")


async def edit_text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE, db, telegram_service):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞."""
    logger.info(f"edit_text_handler –≤—ã–∑–≤–∞–Ω —Å —Ç–µ–∫—Å—Ç–æ–º: {update.message.text[:100]}")

    user_id = update.effective_user.id if update.effective_user else "unknown"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–µ—Å—Å–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    news_id = EDITING_SESSIONS.get(user_id)

    # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    if not news_id and context.user_data:
        news_id = context.user_data.get("editing_news_id")

    logger.info(f"user_id: {user_id}, editing_news_id: {news_id}")

    if not news_id:
        logger.info("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return

    if update.message.text.strip() == "/skip":
        await update.message.reply_text("‚úÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ.")
        _clear_editing_session(user_id, context)
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
    data_entry = db.get_news(news_id)
    if not data_entry:
        await update.message.reply_text("‚ö†Ô∏è –ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ.")
        _clear_editing_session(user_id, context)
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ - –ü–†–Ø–ú–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ —Ñ—É–Ω–∫—Ü–∏–π-–æ–±–µ—Ä—Ç–æ–∫
    logger.info(f"–ü–ï–†–ï–î –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º: –Ω–æ–≤–æ—Å—Ç—å {news_id}")
    logger.info(f"–û–±–Ω–æ–≤–ª—è–µ–º full_text –Ω–∞: '{update.message.text}'")
    logger.info(f"–û–±–Ω–æ–≤–ª—è–µ–º edited –Ω–∞: True")

    # –ü—Ä—è–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if hasattr(db, 'news_db') and news_id in db.news_db:
        # –ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –¥–∞–Ω–Ω—ã—Ö
        db.news_db[news_id]["news_data"]["full_text"] = update.message.text
        db.news_db[news_id]["news_data"]["edited"] = True

        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        if hasattr(db, 'save_db'):
            db.save_db()

        logger.info("‚úÖ –ü—Ä—è–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
    else:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ news_db –∏–ª–∏ –Ω–æ–≤–æ—Å—Ç—å")

    # –ü—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å
    verification_entry = db.get_news(news_id)
    if verification_entry:
        actual_full_text = verification_entry["news_data"].get("full_text", "")
        actual_edited = verification_entry["news_data"].get("edited", False)
        logger.info(f"–ü–†–û–í–ï–†–ö–ê –ü–û–°–õ–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:")
        logger.info(f"Actual full_text: '{actual_full_text[:100]}...'")
        logger.info(f"Actual edited: {actual_edited}")

        if actual_full_text == update.message.text and actual_edited == True:
            logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
        else:
            logger.error("‚ùå –î–ê–ù–ù–´–ï –ù–ï –û–ë–ù–û–í–ò–õ–ò–°–¨!")
    else:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏!")

    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ø—Ä–µ–≤—å—é —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É—è telegram_service
    if data_entry["news_data"].get("preview_message_ids") and data_entry["news_data"].get("preview_chat_id"):
        await telegram_service.safe_delete_messages(
            context.bot,
            data_entry["news_data"]["preview_chat_id"],
            data_entry["news_data"]["preview_message_ids"],
            news_id
        )
        # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–≤—å—é
        clear_updates = {
            "news_data.preview_message_ids": [],
            "news_data.preview_chat_id": None
        }
        _update_news_database(db, news_id, clear_updates)

    logger.info(f"–¢–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ {news_id} –æ–±–Ω–æ–≤–ª–µ–Ω")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—è telegram_service
    try:
        channel_id = data_entry["channel_id"]
        message_id = data_entry["message_id"]

        if message_id is None:
            logger.warning(f"–ù–µ–ª—å–∑—è –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏ {news_id}: message_id is None")
            await update.message.reply_text(
                "‚úÖ –¢–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª—ë–Ω!\n"
                "‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã."
            )
            _clear_editing_session(user_id, context)
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
        fresh_data_entry = db.get_news(news_id)
        news_item = fresh_data_entry["news_data"]

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º telegram_service –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        success = await telegram_service.update_moderation_message(
            context.bot, channel_id, message_id, news_item, news_id
        )

        if success:
            await update.message.reply_text(
                "‚úÖ –¢–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª—ë–Ω –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n"
                "–¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å' –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏."
            )
        else:
            await update.message.reply_text(
                "‚úÖ –¢–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª—ë–Ω!\n"
                "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏, –Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã."
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {e}")
        await update.message.reply_text(
            "‚úÖ –¢–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª—ë–Ω!\n"
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏, –Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã."
        )

    _clear_editing_session(user_id, context)


def _clear_editing_session(user_id, context):
    """–û—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    EDITING_SESSIONS.pop(user_id, None)
    if context.user_data:
        context.user_data["editing_news_id"] = None


async def skip_edit_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /skip."""
    user_id = update.effective_user.id if update.effective_user else "unknown"

    news_id = EDITING_SESSIONS.get(user_id)
    if not news_id and context.user_data:
        news_id = context.user_data.get("editing_news_id")

    if news_id:
        _clear_editing_session(user_id, context)
        await update.message.reply_text("‚úÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ.")
    else:
        await update.message.reply_text("‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")