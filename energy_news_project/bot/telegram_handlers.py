import asyncio
import logging
from telegram import Update
from telegram.ext import ContextTypes
from bot.telegram_bot import PUBLISH_CHANNEL
from bot.formatters import format_news_for_publication, safe_clean_text
from bot.db import NewsDB

logger = logging.getLogger(__name__)


async def split_and_send_text(bot, chat_id, text, max_length=4000):
    """
    –†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π.
    """
    if len(text) <= max_length:
        try:
            await bot.send_message(chat_id=chat_id, text=text)
            await asyncio.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return

    # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    sentences = text.split('. ')
    current_chunk = ""

    for sentence in sentences:
        if len(current_chunk + sentence + '. ') <= max_length:
            current_chunk += sentence + '. '
        else:
            if current_chunk:
                try:
                    await bot.send_message(chat_id=chat_id, text=current_chunk.strip())
                    await asyncio.sleep(0.5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                current_chunk = sentence + '. '
            else:
                # –ï—Å–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, —Ä–∞–∑–±–∏–≤–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
                while len(sentence) > max_length:
                    try:
                        await bot.send_message(chat_id=chat_id, text=sentence[:max_length])
                        await asyncio.sleep(0.5)
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                    sentence = sentence[max_length:]
                current_chunk = sentence + '. ' if sentence else ""

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫
    if current_chunk:
        try:
            await bot.send_message(chat_id=chat_id, text=current_chunk.strip())
            await asyncio.sleep(0.5)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Å—Ç–∞—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ ---
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE, db: NewsDB):
    query = update.callback_query
    await query.answer()
    try:
        action, news_id = query.data.split("|", 1)
        logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ: {action} –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏ {news_id}")

        data_entry = db.get_news(news_id)
        if not data_entry:
            await query.edit_message_text("‚ö†Ô∏è –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        channel_id = data_entry["channel_id"]
        message_id = data_entry["message_id"]
        news_item = data_entry["news_data"]

        if action == "approve":
            news_item = data_entry["news_data"]
            publication_text = format_news_for_publication(news_item)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –Ω–æ–≤–æ—Å—Ç—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞
            edit_status = " (–û–¢–†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–û)" if news_item.get("edited", False) else ""

            # –ü—É–±–ª–∏–∫—É–µ–º –≤ –∫–∞–Ω–∞–ª
            logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é –≤ –∫–∞–Ω–∞–ª {PUBLISH_CHANNEL}")
            await context.bot.send_message(
                chat_id=PUBLISH_CHANNEL,
                text=publication_text,
                disable_web_page_preview=True,
            )
            logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª")

            # –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
            try:
                # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                clean_title = safe_clean_text(news_item.get("title", ""))
                clean_preview = safe_clean_text(news_item.get("preview", ""))
                clean_source = safe_clean_text(news_item.get("source", ""))
                clean_date = safe_clean_text(news_item.get("date", ""))

                original_message = (
                    f"üì∞ {clean_title}\n\n"
                    f"{clean_preview}\n\n"
                    f"–ò—Å—Ç–æ—á–Ω–∏–∫: {clean_source} ({clean_date})\n"
                    f"{news_item.get('url', '')}"
                )

                await context.bot.edit_message_text(
                    chat_id=channel_id,
                    message_id=message_id,
                    text=f"‚úÖ –û–ü–£–ë–õ–ò–ö–û–í–ê–ù–û{edit_status}\n\n{original_message}",
                    reply_markup=None,
                )
            except Exception as edit_error:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {edit_error}")
                # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await context.bot.send_message(
                    chat_id=channel_id,
                    text=f"‚úÖ –ù–æ–≤–æ—Å—Ç—å {news_id} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞{edit_status.lower()}"
                )

            logger.info(f"–ù–æ–≤–æ—Å—Ç—å {news_id} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞{edit_status.lower()}.")

        elif action == "reject":
            await context.bot.edit_message_text(
                chat_id=channel_id,
                message_id=message_id,
                text=f"‚ùå –û–¢–ö–õ–û–ù–ï–ù–û\n\n{query.message.text}",
                reply_markup=None,
            )
            logger.info(f"–ù–æ–≤–æ—Å—Ç—å {news_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")

        elif action == "edit":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
            full_text = news_item.get("full_text", "")
            if full_text:
                await query.message.reply_text(
                    f"üìù –¢–µ–∫—É—â–∏–π –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ (ID: {news_id}):"
                )
                await split_and_send_text(context.bot, query.message.chat_id, full_text)
            else:
                await query.message.reply_text("‚ö†Ô∏è –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")

            await query.message.reply_text(
                "‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏.\n"
                "–ß—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip"
            )
            context.user_data["editing_news_id"] = news_id

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
        await query.edit_message_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ ---
async def edit_text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE, db: NewsDB):
    logger.info(f"edit_text_handler –≤—ã–∑–≤–∞–Ω —Å —Ç–µ–∫—Å—Ç–æ–º: {update.message.text[:100]}")
    logger.info(f"user_data: {context.user_data}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ user_data –Ω–µ None
    if context.user_data is None:
        logger.warning("User data is None, skipping edit handling")
        return

    news_id = context.user_data.get("editing_news_id")
    logger.info(f"editing_news_id: {news_id}")

    if not news_id:
        logger.info("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return

    if update.message.text == "/skip":
        await update.message.reply_text("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ.")
        context.user_data["editing_news_id"] = None
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏
    db.news_db[news_id]["news_data"]["full_text"] = update.message.text
    # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –Ω–æ–≤–æ—Å—Ç—å –±—ã–ª–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞
    db.news_db[news_id]["news_data"]["edited"] = True
    db.save_db()

    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    logger.info(f"–¢–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ {news_id} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: {update.message.text[:100]}")

    await update.message.reply_text(
        "‚úÖ –¢–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª—ë–Ω! –¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å' –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏.")

    context.user_data["editing_news_id"] = None


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /skip ---
async def skip_edit_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ user_data –Ω–µ None
    if context.user_data is None:
        logger.warning("User data is None, skipping skip command")
        return

    news_id = context.user_data.get("editing_news_id")
    if news_id:
        context.user_data["editing_news_id"] = None
        await update.message.reply_text("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ.")