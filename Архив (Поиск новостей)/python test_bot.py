'''
–û—Ç–ª–∏—á–Ω–æ! üéâ –≠—Ç–æ –∑–Ω–∞—á–∏—Ç:

‚úÖ Callback-–∫–Ω–æ–ø–∫–∏ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º –±–æ—Ç–µ —Ä–∞–±–æ—Ç–∞—é—Ç
‚úÖ button_handler –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è
‚úÖ pattern=r"^(approve|reject)\|" –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ –ù–ï –≤ –∫–æ–¥–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
'''


from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
import logging

TOKEN = "8217915867:AAFLPnQmnxhHmjloF4Ct3HhR9jjRjVYV6C8"

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="approve|123"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data="reject|123"),
        ]
    ]
    await update.message.reply_text("–¢–µ—Å—Ç–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å", reply_markup=InlineKeyboardMarkup(keyboard))


async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    logger.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: {query.data}")
    await query.answer("–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ!")
    await query.edit_message_text(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {query.data}")


def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_callback, pattern=r"^(approve|reject)\|"))
    app.run_polling()

if __name__ == "__main__":
    main()
