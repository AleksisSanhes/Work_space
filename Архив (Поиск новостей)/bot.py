import logging
import json
import os
import re
import asyncio
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Bot
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from telegram.error import RetryAfter
import html
import hashlib


# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = "8217915867:AAFLPnQmnxhHmjloF4Ct3HhR9jjRjVYV6C8"
MODERATION_CHANNEL = "-1002996332660"
PUBLISH_CHANNEL = "-1003006895565"
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è
SENT_IDS_FILE = "sent_ids.json"
NEWS_DB_FILE = "news_db.json"

NEWS_DB = {}  # {id: {... –¥–∞–Ω–Ω—ã–µ ...}}


def make_news_id(item, index=0):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ ID –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏"""
    # –ë–µ—Ä—ë–º URL, –µ—Å–ª–∏ –µ—Å—Ç—å
    key = (item.get("url") or "").strip()
    if not key:
        # fallback: title+date
        key = f"{item.get('title','')}-{item.get('date','')}".strip()
    if not key:
        # fallback: preview (–æ–±—Ä–µ–∑–∞–µ–º)
        key = item.get("preview", "")[:120]

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π sha256-—Ö–µ—à (16 —Å–∏–º–≤–æ–ª–æ–≤)
    return hashlib.sha256(key.encode("utf-8")).hexdigest()[:16]

def safe_clean_text(text: str) -> str:
    if not text:
        return ""
    text = re.sub(r'<[^>]+>', '', text)
    text = html.unescape(text)
    text = re.sub(r'\s+', ' ', text).strip()
    return text


# ---------- –ß–¢–ï–ù–ò–ï / –ó–ê–ü–ò–°–¨ —Ñ–∞–π–ª–æ–≤ ----------

def load_sent_ids() -> set:
    if os.path.exists(SENT_IDS_FILE):
        with open(SENT_IDS_FILE, 'r', encoding='utf-8') as f:
            return set(json.load(f))
    return set()


def save_sent_ids(sent_ids: set):
    with open(SENT_IDS_FILE, 'w', encoding='utf-8') as f:
        json.dump(list(sent_ids), f, ensure_ascii=False)


def load_news_db():
    global NEWS_DB
    if os.path.exists(NEWS_DB_FILE):
        with open(NEWS_DB_FILE, 'r', encoding='utf-8') as f:
            NEWS_DB = json.load(f)
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ NEWS_DB –∏–∑ —Ñ–∞–π–ª–∞ ({len(NEWS_DB)} –∑–∞–ø–∏—Å–µ–π).")


def save_news_db():
    with open(NEWS_DB_FILE, 'w', encoding='utf-8') as f:
        json.dump(NEWS_DB, f, ensure_ascii=False)


# =============================================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")


async def test_publish_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        await context.bot.send_message(chat_id=PUBLISH_CHANNEL, text="üîî –¢–µ—Å—Ç–æ–≤–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è")
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–µ—Å–ª–∏ –±–æ—Ç –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É).")
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")


async def send_to_moderation(bot: Bot, news_item: dict, sent_ids: set):
    title = safe_clean_text(news_item.get("title", "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"))
    source = safe_clean_text(news_item.get("source", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫"))
    date = safe_clean_text(news_item.get("date", ""))
    preview = safe_clean_text(news_item.get("preview", ""))
    url = news_item.get("url", "")

    text = f"{title}\n\n–ò—Å—Ç–æ—á–Ω–∏–∫: {source}\n–î–∞—Ç–∞: {date}\n–°—Å—ã–ª–∫–∞: {url}\n\n{preview}"
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"approve|{news_item['id']}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject|{news_item['id']}"),
        ]
    ]
    message = await bot.send_message(
        chat_id=MODERATION_CHANNEL,
        text=text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        disable_web_page_preview=True,
    )

    NEWS_DB[news_item['id']] = {
        "message_id": message.message_id,
        "news_data": news_item,
        "channel_id": MODERATION_CHANNEL,
    }
    sent_ids.add(news_item['id'])
    logger.info(f"–ù–æ–≤–æ—Å—Ç—å {news_item['id']} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –º–æ–¥–µ—Ä–∞—Ü–∏—é.")
    save_news_db()
    save_sent_ids(sent_ids)


def format_news_for_publication(news_item: dict) -> str:
    title = safe_clean_text(news_item.get("title", "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"))
    text = safe_clean_text(news_item.get("full_text", ""))
    source = safe_clean_text(news_item.get("source", "–ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ —É–∫–∞–∑–∞–Ω"))
    url = news_item.get("url", "")

    if len(text) > 3800:
        text = text[:3800] + "... [–æ–±—Ä–µ–∑–∞–Ω–æ]"

    return f"üî• {title}\n\n{text}\n\n–ò—Å—Ç–æ—á–Ω–∏–∫: {source}\n–û—Ä–∏–≥–∏–Ω–∞–ª: {url}"


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    try:
        action, news_id = query.data.split("|", 1)
        data_entry = NEWS_DB.get(news_id)
        if not data_entry:
            await query.edit_message_text("‚ö†Ô∏è –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        channel_id = data_entry["channel_id"]
        message_id = data_entry["message_id"]
        news_item = data_entry["news_data"]

        if action == "approve":
            publication_text = format_news_for_publication(news_item)
            await context.bot.send_message(
                chat_id=PUBLISH_CHANNEL,
                text=publication_text,
                disable_web_page_preview=True,
            )
            await context.bot.edit_message_text(
                chat_id=channel_id,
                message_id=message_id,
                text=f"‚úÖ –û–ü–£–ë–õ–ò–ö–û–í–ê–ù–û\n\n{query.message.text}",
                reply_markup=None
            )
            logger.info(f"–ù–æ–≤–æ—Å—Ç—å {news_id} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞.")

        elif action == "reject":
            await context.bot.edit_message_text(
                chat_id=channel_id,
                message_id=message_id,
                text=f"‚ùå –û–¢–ö–õ–û–ù–ï–ù–û\n\n{query.message.text}",
                reply_markup=None
            )
            logger.info(f"–ù–æ–≤–æ—Å—Ç—å {news_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")

        save_news_db()  # –û–±–Ω–æ–≤–∏—Ç—å —Ñ–∞–π–ª –±–∞–∑—ã –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
        await query.edit_message_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")


async def load_and_send_news_if_requested(bot: Bot, sent_ids: set):
    # –ü–æ–ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    answer = input(
        "\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:\n"
        "1) –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏\n"
        "2) –¢–æ–ª—å–∫–æ —Å–ª—É—à–∞—Ç—å –∫–Ω–æ–ø–∫–∏\n"
        "–í–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2: "
    ).strip()

    if answer != "1":
        print("–ù–æ–≤–æ—Å—Ç–∏ –Ω–µ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è. –ë–æ—Ç —Ç–æ–ª—å–∫–æ —Å–ª—É—à–∞–µ—Ç –∫–Ω–æ–ø–∫–∏.")
        return

    # --- –ï—Å–ª–∏ "1" ---
    print("–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ —Ñ–∞–π–ª–æ–≤...")

    files = [f for f in os.listdir() if f.startswith("energy_news") and f.endswith(".json")]
    if not files:
        print("‚ùó –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ energy_news*.json")
        return

    latest_file = max(files, key=os.path.getctime)
    try:
        with open(latest_file, "r", encoding="utf-8") as f:
            news_list = json.load(f)
    except Exception as e:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª:", e)
        return

    count = 0
    for i, item in enumerate(news_list):
        if not all(k in item for k in ["title", "source", "date", "url", "preview", "full_text"]):
            continue
        # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º id
        item_id = make_news_id(item, i)
        if item_id in sent_ids:
            continue
        item["id"] = item_id
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        await send_to_moderation(bot, item, sent_ids)
        count += 1
        await asyncio.sleep(2)

    print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –º–æ–¥–µ—Ä–∞—Ü–∏—é: {count} –Ω–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π.")


async def shutdown_previous_webhook(bot: Bot):
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        logger.info("Webhook —É–¥–∞–ª—ë–Ω (–µ—Å–ª–∏ –±—ã–ª).")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å webhook: {e}")


async def post_init(app: Application):
    await shutdown_previous_webhook(app.bot)
    # –∑–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∂–µ–ª–∞–Ω–∏—é
    load_news_db()
    sent_ids = load_sent_ids()
    await load_and_send_news_if_requested(app.bot, sent_ids)


def main():
    application = (
        Application.builder()
        .token(TOKEN)
        .post_init(post_init)
        .build()
    )

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("testpublish", test_publish_command))
    application.add_handler(CallbackQueryHandler(button_handler, pattern=r"^(approve|reject)\|"))

    application.run_polling()


if __name__ == "__main__":
    main()